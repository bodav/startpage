<div
  x-data="{ searchOpen: false }"
  x-on:keydown.document="handleGlobalKeypress">
  <div
    x-cloak
    x-show="searchOpen"
    class="fixed inset-0 z-40 overflow-y-auto"
    role="dialog"
    aria-modal="true">
    <div
      x-cloak
      x-show="searchOpen"
      x-transition:enter="transition ease-out duration-100 transform"
      x-transition:enter-start="opacity-0"
      x-transition:enter-end="opacity-100"
      x-transition:leave="transition ease-in duration-100 transform"
      x-transition:leave-start="opacity-100"
      x-transition:leave-end="opacity-0"
      aria-hidden="true"
      class="fixed inset-0 bg-black bg-opacity-50 dark:bg-white dark:bg-opacity-50">
    </div>
    <div
      class="flex min-h-full min-w-full items-start justify-center text-center">
      <dialog
        x-on:click.outside="searchOpen = false"
        x-effect="ensureFocus"
        class="mt-[10%] min-w-[80%] max-w-[90%] md:min-w-[40%] rounded-md p-0 block font-medium bg-white/60 dark:bg-black/50">
        <form
          x-ref="searchForm"
          action="https://google.com/search"
          target="_blank"
          x-on:keyup.enter="handleSearch"
          x-on:submit.prevent
          method="get">
          <input
            placeholder="Search"
            name="q"
            class="rounded-md w-full p-4 m-0 outline-none focus:outline-offset-0 text-sm md:text-xl text-black dark:text-white bg-white/60 dark:bg-black/50"
            type="text"
            x-ref="searchInput"
            autocorrect="false"
          />
        </form>
      </dialog>
    </div>
  </div>
</div>

<style>
  [x-cloak] {
    display: none !important;
  }
</style>

<script is:inline>
  const re = new RegExp("^\\d|\\w+$", "g");

  function handleGlobalKeypress(e) {
    if (this.searchOpen) {
      if (e.key === "Escape") {
        this.searchOpen = false;
      }
      return;
    }

    if (re.test(String.fromCharCode(e.keyCode))) {
      this.$nextTick(() => {
        this.$refs.searchInput.value = e.key;
      });
      this.searchOpen = true;
    }
  }

  function ensureFocus() {
    if (this.searchOpen) {
      this.$nextTick(() => {
        setTimeout(() => {
          this.$refs.searchInput.focus();
        });
      });
    }
  }

  function handleSearch() {
    this.searchOpen = false;
    this.$nextTick(() => {
      setTimeout(() => {
        this.$refs.searchForm.submit();
      });
    });
  }
</script>
